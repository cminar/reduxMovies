{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nolanminar/prime/tier2/weekendproj/movieSaga/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/nolanminar/prime/tier2/weekendproj/movieSaga/src/index.js\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchMovies);\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux'; // Provider allows us to use redux within our react app\n\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport axios from \"axios\";\nimport { takeEvery, put } from 'redux-saga/effects'; // Import saga middleware\n\nimport createSagaMiddleware from 'redux-saga'; // Create the rootSaga generator function\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery('FETCH_MOVIES', fetchMovies);\n\n        case 2:\n          _context.next = 4;\n          return takeEvery('SET_MOVIES', setMovieInfo);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction fetchMovies() {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchMovies$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return axios.get('/api/movies');\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: 'SET_MOVIES',\n            payload: response.data\n          });\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('error in Fetch', _context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} // Create sagaMiddleware\n\n\nvar sagaMiddleware = createSagaMiddleware(); // Used to store movies returned from the server\n\nvar movies = function movies() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_MOVIES':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Used to store the movie genres\n\n\nvar genres = function genres() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_GENRES':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Create one store that all components can use\n\n\nvar storeInstance = createStore(combineReducers({\n  movies: movies,\n  genres: genres\n}), // Add sagaMiddleware to our store\napplyMiddleware(sagaMiddleware, logger)); // Pass rootSaga into our sagaMiddleware\n\nsagaMiddleware.run(rootSaga);\nReactDOM.render(React.createElement(Provider, {\n  store: storeInstance,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n})), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["/Users/nolanminar/prime/tier2/weekendproj/movieSaga/src/index.js"],"names":["rootSaga","fetchMovies","React","ReactDOM","App","registerServiceWorker","createStore","combineReducers","applyMiddleware","Provider","logger","axios","takeEvery","put","createSagaMiddleware","setMovieInfo","get","response","type","payload","data","console","log","sagaMiddleware","movies","state","action","genres","storeInstance","run","render","document","getElementById"],"mappings":";;;;;yBAeUA,Q;;;yBAIAC,W;;AAnBV,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CACA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,oBAA/B,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAEA;;AACA,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMY,SAAS,CAAC,cAAD,EAAiBX,WAAjB,CAAf;;AADJ;AAAA;AAEI,iBAAMW,SAAS,CAAC,YAAD,EAAeG,YAAf,CAAf;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUd,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMU,KAAK,CAACK,GAAN,CAAU,aAAV,CAAN;;AAFvB;AAEYC,UAAAA,QAFZ;AAAA;AAGM,iBAAMJ,GAAG,CAAE;AAAEK,YAAAA,IAAI,EAAC,YAAP;AAAqBC,YAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAvC,WAAF,CAAT;;AAHN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKMC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQA;;;AACA,IAAMC,cAAc,GAAGT,oBAAoB,EAA3C,C,CAEA;;AACA,IAAMU,MAAM,GAAG,SAATA,MAAS,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACnC,UAAQA,MAAM,CAACR,IAAf;AACI,SAAK,YAAL;AACI,aAAOQ,MAAM,CAACP,OAAd;;AACJ;AACI,aAAOM,KAAP;AAJR;AAMH,CAPD,C,CASA;;;AACA,IAAME,MAAM,GAAG,SAATA,MAAS,GAAwB;AAAA,MAAvBF,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACnC,UAAQA,MAAM,CAACR,IAAf;AACI,SAAK,YAAL;AACI,aAAOQ,MAAM,CAACP,OAAd;;AACJ;AACI,aAAOM,KAAP;AAJR;AAMH,CAPD,C,CASA;;;AACA,IAAMG,aAAa,GAAGtB,WAAW,CAC7BC,eAAe,CAAC;AACZiB,EAAAA,MAAM,EAANA,MADY;AAEZG,EAAAA,MAAM,EAANA;AAFY,CAAD,CADc,EAK7B;AACAnB,eAAe,CAACe,cAAD,EAAiBb,MAAjB,CANc,CAAjC,C,CASA;;AACAa,cAAc,CAACM,GAAf,CAAmB7B,QAAnB;AAEAG,QAAQ,CAAC2B,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAgC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhC,CAAhB,EACIG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADJ;AAEA3B,qBAAqB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport axios from \"axios\";\nimport { takeEvery, put } from 'redux-saga/effects'\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\n\n// Create the rootSaga generator function\nfunction* rootSaga() {\n    yield takeEvery('FETCH_MOVIES', fetchMovies);\n    yield takeEvery('SET_MOVIES', setMovieInfo);\n}\nfunction* fetchMovies(){\n    try{\n      const response = yield axios.get('/api/movies');\n      yield put ({ type:'SET_MOVIES', payload: response.data })\n    }catch (error){\n      console.log('error in Fetch', error);\n    }\n  }\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store movies returned from the server\nconst movies = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_MOVIES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store the movie genres\nconst genres = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_GENRES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        movies,\n        genres,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"]},"metadata":{},"sourceType":"module"}